通讯层的设计

1.两种通讯方式
	请求--相应
	订阅--发布

	关键点
	用户session的识别和控制
		1.基于什么？session还是别的
		2.识别出session后，session和room的关系如何存储
		3.房间和玩家关系的操作方式和存储方式的设计


	主要实现
	基本通讯的实现:
		基于crossbar.io + python3 asyncio

		关键问题
			1.session的工作原理
			2.server端的数据库的orm的相关初始化建立工作


2.热更新的实现
	暂时不用实现，需要处理的相关问题太多
	目前会全部将数据固化到psql里面，通过信号来实现是否结束当前进程和重启服务

3.前端的资源和相应的处理
	本阶段暂时不用处理，后期主要配合cocoscreator进行开发




热更最终方案
1.系统重启，就将数据先固化到db中，再从重启进程
2.重启进程从db中取N条固化的数据放入房间，继续处理

第一版本目标
用户承载量300桌游戏
GAMEServer 暂时只有一台，不做负载






